name: 'Terraform'

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    #Shell: bash
    working-directory: ./001
permissions:
  id-token: write
  contents: read
 
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  TF_STATE_BUCKET_NAME: ${{ secrets.GCP_TF_STATE_BUCKET }}
  
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses:  'google-github-actions/auth@v0.4.0'
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    # - name: Authenticate to Google Cloud
    #   env:
    #     CLIENT_ID: ${{ secrets.CLIENT_ID }}
    #     CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

    #   uses: google-github-actions/auth@v2
    #   with:
    #     workload_identity_provider: "projects/287702920783/locations/global/workloadIdentityPools/terra-pool/providers/terra-provider"
    #     #workload_identity_provider: "//iam.googleapis.com/projects/287702920783/locations/global/workloadIdentityPools/terra-pool/providers/terra-provider"
    #     create_credentials_file: true
    #     service_account: "terra-510@advance-terraform-406410.iam.gserviceaccount.com"
    #     #token_format: access_token
    #     access_token_lifetime: "120s"
    #     # Assume the audience is the same as the provider ID for simplicity, double-check your specific requirements
    #     audience:  "//iam.googleapis.com/projects/287702920783/locations/global/workloadIdentityPools/terra-pool/providers/terra-provider"
    #     # audience:  "projects/287702920783/locations/global/workloadIdentityPools/terra-pool/providers/terra-provider"

    - name: Echo stuff
      run: printenv

    - name: Terraform Init
      run: terraform init
      # working-directory: ./001

    - name: Terraform Plan
      run: TF_LOG=DEBUG terraform plan -out=tfplan
      # working-directory: ./001

    # - name: Terraform Apply
    #   run: terraform apply -auto-approve
    #    working-directory: ./001
    #   if: github.ref == 'refs/heads/main'

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      # working-directory: ./001
      if: github.ref == 'refs/heads/main'